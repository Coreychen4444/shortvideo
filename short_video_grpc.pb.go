// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: short_video.proto

package shortvideo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Register_FullMethodName        = "/shortvideo.UserService/Register"
	UserService_Login_FullMethodName           = "/shortvideo.UserService/Login"
	UserService_GetUserInfo_FullMethodName     = "/shortvideo.UserService/GetUserInfo"
	UserService_FollowOrCancel_FullMethodName  = "/shortvideo.UserService/FollowOrCancel"
	UserService_GetFollowings_FullMethodName   = "/shortvideo.UserService/GetFollowings"
	UserService_GetFollowers_FullMethodName    = "/shortvideo.UserService/GetFollowers"
	UserService_GetFriends_FullMethodName      = "/shortvideo.UserService/GetFriends"
	UserService_GetChatMessages_FullMethodName = "/shortvideo.UserService/GetChatMessages"
	UserService_SendMessage_FullMethodName     = "/shortvideo.UserService/SendMessage"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	FollowOrCancel(ctx context.Context, in *FollowOrCancelRequest, opts ...grpc.CallOption) (*FollowOrCancelResponse, error)
	GetFollowings(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption) (*GetFollowingsResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error)
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FollowOrCancel(ctx context.Context, in *FollowOrCancelRequest, opts ...grpc.CallOption) (*FollowOrCancelResponse, error) {
	out := new(FollowOrCancelResponse)
	err := c.cc.Invoke(ctx, UserService_FollowOrCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFollowings(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption) (*GetFollowingsResponse, error) {
	out := new(GetFollowingsResponse)
	err := c.cc.Invoke(ctx, UserService_GetFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, UserService_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error) {
	out := new(GetFriendsResponse)
	err := c.cc.Invoke(ctx, UserService_GetFriends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error) {
	out := new(GetChatMessagesResponse)
	err := c.cc.Invoke(ctx, UserService_GetChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, UserService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Register(context.Context, *UserRequest) (*UserResponse, error)
	Login(context.Context, *UserRequest) (*UserResponse, error)
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	FollowOrCancel(context.Context, *FollowOrCancelRequest) (*FollowOrCancelResponse, error)
	GetFollowings(context.Context, *GetFollowingsRequest) (*GetFollowingsResponse, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error)
	GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Register(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) FollowOrCancel(context.Context, *FollowOrCancelRequest) (*FollowOrCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowOrCancel not implemented")
}
func (UnimplementedUserServiceServer) GetFollowings(context.Context, *GetFollowingsRequest) (*GetFollowingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowings not implemented")
}
func (UnimplementedUserServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedUserServiceServer) GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedUserServiceServer) GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedUserServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FollowOrCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowOrCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FollowOrCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FollowOrCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FollowOrCancel(ctx, req.(*FollowOrCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFollowings(ctx, req.(*GetFollowingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFriends(ctx, req.(*GetFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetChatMessages(ctx, req.(*GetChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortvideo.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "FollowOrCancel",
			Handler:    _UserService_FollowOrCancel_Handler,
		},
		{
			MethodName: "GetFollowings",
			Handler:    _UserService_GetFollowings_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _UserService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _UserService_GetFriends_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _UserService_GetChatMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _UserService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "short_video.proto",
}

const (
	VideoService_GetUserVideoList_FullMethodName = "/shortvideo.VideoService/GetUserVideoList"
	VideoService_GetVideoFlow_FullMethodName     = "/shortvideo.VideoService/GetVideoFlow"
	VideoService_PublishVideo_FullMethodName     = "/shortvideo.VideoService/PublishVideo"
	VideoService_LikeVideo_FullMethodName        = "/shortvideo.VideoService/LikeVideo"
	VideoService_GetUserLike_FullMethodName      = "/shortvideo.VideoService/GetUserLike"
	VideoService_CommentVideo_FullMethodName     = "/shortvideo.VideoService/CommentVideo"
	VideoService_DeleteComment_FullMethodName    = "/shortvideo.VideoService/DeleteComment"
	VideoService_GetVideoComment_FullMethodName  = "/shortvideo.VideoService/GetVideoComment"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	GetUserVideoList(ctx context.Context, in *UserVideoListRequest, opts ...grpc.CallOption) (*UserVideoListResponse, error)
	GetVideoFlow(ctx context.Context, in *VideoFlowRequest, opts ...grpc.CallOption) (*VideoFlowResponse, error)
	PublishVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_PublishVideoClient, error)
	LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoResponse, error)
	GetUserLike(ctx context.Context, in *UserLikeRequest, opts ...grpc.CallOption) (*UserLikeResponse, error)
	CommentVideo(ctx context.Context, in *CommentVideoRequest, opts ...grpc.CallOption) (*CommentVideoResponse, error)
	DeleteComment(ctx context.Context, in *CommentVideoRequest, opts ...grpc.CallOption) (*CommentVideoResponse, error)
	GetVideoComment(ctx context.Context, in *VideoCommentRequest, opts ...grpc.CallOption) (*VideoCommentResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetUserVideoList(ctx context.Context, in *UserVideoListRequest, opts ...grpc.CallOption) (*UserVideoListResponse, error) {
	out := new(UserVideoListResponse)
	err := c.cc.Invoke(ctx, VideoService_GetUserVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoFlow(ctx context.Context, in *VideoFlowRequest, opts ...grpc.CallOption) (*VideoFlowResponse, error) {
	out := new(VideoFlowResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_PublishVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[0], VideoService_PublishVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServicePublishVideoClient{stream}
	return x, nil
}

type VideoService_PublishVideoClient interface {
	Send(*PublishVideoRequest) error
	CloseAndRecv() (*PublishVideoResponse, error)
	grpc.ClientStream
}

type videoServicePublishVideoClient struct {
	grpc.ClientStream
}

func (x *videoServicePublishVideoClient) Send(m *PublishVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoServicePublishVideoClient) CloseAndRecv() (*PublishVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublishVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoServiceClient) LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoResponse, error) {
	out := new(LikeVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_LikeVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetUserLike(ctx context.Context, in *UserLikeRequest, opts ...grpc.CallOption) (*UserLikeResponse, error) {
	out := new(UserLikeResponse)
	err := c.cc.Invoke(ctx, VideoService_GetUserLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) CommentVideo(ctx context.Context, in *CommentVideoRequest, opts ...grpc.CallOption) (*CommentVideoResponse, error) {
	out := new(CommentVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_CommentVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteComment(ctx context.Context, in *CommentVideoRequest, opts ...grpc.CallOption) (*CommentVideoResponse, error) {
	out := new(CommentVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoComment(ctx context.Context, in *VideoCommentRequest, opts ...grpc.CallOption) (*VideoCommentResponse, error) {
	out := new(VideoCommentResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	GetUserVideoList(context.Context, *UserVideoListRequest) (*UserVideoListResponse, error)
	GetVideoFlow(context.Context, *VideoFlowRequest) (*VideoFlowResponse, error)
	PublishVideo(VideoService_PublishVideoServer) error
	LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoResponse, error)
	GetUserLike(context.Context, *UserLikeRequest) (*UserLikeResponse, error)
	CommentVideo(context.Context, *CommentVideoRequest) (*CommentVideoResponse, error)
	DeleteComment(context.Context, *CommentVideoRequest) (*CommentVideoResponse, error)
	GetVideoComment(context.Context, *VideoCommentRequest) (*VideoCommentResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) GetUserVideoList(context.Context, *UserVideoListRequest) (*UserVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideoList not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoFlow(context.Context, *VideoFlowRequest) (*VideoFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoFlow not implemented")
}
func (UnimplementedVideoServiceServer) PublishVideo(VideoService_PublishVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceServer) LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetUserLike(context.Context, *UserLikeRequest) (*UserLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLike not implemented")
}
func (UnimplementedVideoServiceServer) CommentVideo(context.Context, *CommentVideoRequest) (*CommentVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentVideo not implemented")
}
func (UnimplementedVideoServiceServer) DeleteComment(context.Context, *CommentVideoRequest) (*CommentVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoComment(context.Context, *VideoCommentRequest) (*VideoCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoComment not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetUserVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetUserVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetUserVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetUserVideoList(ctx, req.(*UserVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoFlow(ctx, req.(*VideoFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoServiceServer).PublishVideo(&videoServicePublishVideoServer{stream})
}

type VideoService_PublishVideoServer interface {
	SendAndClose(*PublishVideoResponse) error
	Recv() (*PublishVideoRequest, error)
	grpc.ServerStream
}

type videoServicePublishVideoServer struct {
	grpc.ServerStream
}

func (x *videoServicePublishVideoServer) SendAndClose(m *PublishVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoServicePublishVideoServer) Recv() (*PublishVideoRequest, error) {
	m := new(PublishVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoService_LikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).LikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_LikeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).LikeVideo(ctx, req.(*LikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetUserLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetUserLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetUserLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetUserLike(ctx, req.(*UserLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_CommentVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).CommentVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_CommentVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).CommentVideo(ctx, req.(*CommentVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteComment(ctx, req.(*CommentVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoComment(ctx, req.(*VideoCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortvideo.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserVideoList",
			Handler:    _VideoService_GetUserVideoList_Handler,
		},
		{
			MethodName: "GetVideoFlow",
			Handler:    _VideoService_GetVideoFlow_Handler,
		},
		{
			MethodName: "LikeVideo",
			Handler:    _VideoService_LikeVideo_Handler,
		},
		{
			MethodName: "GetUserLike",
			Handler:    _VideoService_GetUserLike_Handler,
		},
		{
			MethodName: "CommentVideo",
			Handler:    _VideoService_CommentVideo_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _VideoService_DeleteComment_Handler,
		},
		{
			MethodName: "GetVideoComment",
			Handler:    _VideoService_GetVideoComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishVideo",
			Handler:       _VideoService_PublishVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "short_video.proto",
}
